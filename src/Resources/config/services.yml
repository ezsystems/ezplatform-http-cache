parameters:
    ezplatform.http_cache.controller.invalidatetoken.class: EzSystems\PlatformHttpCacheBundle\Controller\InvalidateTokenController
    ezplatform.http_cache.listener.vary_header.class: EzSystems\PlatformHttpCacheBundle\EventListener\ConditionallyRemoveVaryHeaderListener
    ezplatform.http_cache.proxy_client.http_dispatcher.class: FOS\HttpCache\ProxyClient\HttpDispatcher
    # Set in \EzSystems\PlatformHttpCacheBundle\DependencyInjection\Compiler\VarnishCachePass
    # equal to settings under fos_http_cache.proxy_client.varnish.http.servers|base_url
    ezplatform.http_cache.varnish.http.servers: []
    ezplatform.http_cache.varnish.http.base_url: ~
    # Optional settings to set a max length parameter (in bytes, eg 7900) and corresponding ttl (in seconds, eg 3600)
    # Set  ttl to a low number as removing tags involves risk of stale responses (as it won't be purged on the tags removed)
    # NOTE: System will log warning when this happens so you can fix the given response to avoid the issue.
    ezplatform.http_cache.tags.header_max_length: null
    ezplatform.http_cache.tags.header_reduced_ttl: null

services:
    EzSystems\PlatformHttpCacheBundle\ProxyClient\HttpDispatcherFactory:
        arguments:
            - '@ezpublish.config.resolver'
            - '@ezpublish.config.dynamic_setting.parser'
            - '%ezplatform.http_cache.proxy_client.http_dispatcher.class%'

    ezplatform.http_cache.proxy_client.varnish.http_dispatcher:
        class: '%ezplatform.http_cache.proxy_client.http_dispatcher.class%'
        decorates: fos_http_cache.proxy_client.varnish.http_dispatcher
        lazy: true
        factory: ['@EzSystems\PlatformHttpCacheBundle\ProxyClient\HttpDispatcherFactory', 'buildHttpDispatcher']
        arguments:
            $servers: '%ezplatform.http_cache.varnish.http.servers%'
            $baseUrl: '%ezplatform.http_cache.varnish.http.base_url%'

    ezplatform.http_cache.purge_client:
        alias: ezplatform.http_cache.purge_client_decorator

    ezplatform.http_cache.purge_client_decorator:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\RepositoryPrefixDecorator
        arguments: ['@ezplatform.http_cache.purge_client_internal', '@ezplatform.http_cache.repository_tag_prefix']

    ezplatform.http_cache.purge_client_internal:
        alias: ezplatform.http_cache.purge_client.local

    ezplatform.http_cache.purge_client.varnish:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\VarnishPurgeClient
        arguments:
            - '@fos_http_cache.cache_manager'
        tags:
            - {name: ezplatform.http_cache.purge_client, purge_type: varnish}

    ezplatform.http_cache.purge_client.local:
        class: EzSystems\PlatformHttpCacheBundle\PurgeClient\LocalPurgeClient
        arguments: ['@ezplatform.http_cache.tag_aware_store']
        tags:
            - {name: ezplatform.http_cache.purge_client, purge_type: local}

    ezplatform.http_cache.tag_aware_store:
        class: Toflar\Psr6HttpCacheStore\Psr6Store
        arguments:
            - cache_directory: '%ezplatform.http_cache.store.root%'

    ezplatform.http_cache.fos_tag_handler.xkey:
        class: EzSystems\PlatformHttpCacheBundle\Handler\TagHandler
        arguments:
         - '@ezplatform.http_cache.repository_tag_prefix'
         - '@logger'
         - header_formatter: '@fos_http_cache.tag_handler.header_formatter'
           strict: '%fos_http_cache.tag_handler.strict%'
           # Custom eZ options (todo: Port to FOS)
           tag_max_length: '%ezplatform.http_cache.tags.header_max_length%'
           tag_max_length_ttl: '%ezplatform.http_cache.tags.header_reduced_ttl%'

    ezplatform.http_cache.user_context_provider.role_identify:
        class: EzSystems\PlatformHttpCacheBundle\ContextProvider\RoleIdentify
        arguments:
            - '@ezpublish.api.repository'
            - '@eZ\Publish\API\Repository\PermissionResolver'
            - '@ezpublish.api.service.user'
        tags:
            - { name: fos_http_cache.user_context_provider }

    ezplatform.http_cache.controller.invalidatetoken:
        class: "%ezplatform.http_cache.controller.invalidatetoken.class%"
        arguments:
         - '@ezpublish.config.resolver'
         - "%ezplatform.http_cache.invalidate_token.ttl%"
         - "@fos_http_cache.http.symfony_response_tagger"
        tags:
            - controller.service_arguments

    ezplatform.http_cache.listener.vary_header:
        class: "%ezplatform.http_cache.listener.vary_header.class%"
        arguments:
         - "%ezplatform.http_cache.no_vary.routes%"
        tags:
            - { name: kernel.event_subscriber, priority: -100 }

    Ibexa\HttpCache\EventSubscriber\AddContentLanguageHeaderSubscriber:
        arguments:
            - '%ibexa.http_cache.translation_aware.enabled%'
        tags:
            - { name: kernel.event_subscriber }

    ezplatform.http_cache.repository_tag_prefix:
        class: EzSystems\PlatformHttpCacheBundle\RepositoryTagPrefix
        # Use config resolver to be able to lazy load reading SA setting "repository" to avoid scope change issues
        arguments: ["@ezpublish.config.resolver", '%ezpublish.repositories%']

    fos_http_cache.proxy_client.varnish:
        class: EzSystems\PlatformHttpCacheBundle\ProxyClient\Varnish
        arguments:
            $configResolver: '@ezpublish.config.resolver'
            $httpDispatcher: '@fos_http_cache.proxy_client.varnish.http_dispatcher'
            $options: '%fos_http_cache.proxy_client.varnish.options%'
